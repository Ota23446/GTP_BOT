from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from utils import NOTIFICATION_TYPES
from aiogram.types import CallbackQuery
from datetime import datetime, timedelta
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import MONTHS_RU, WEEKDAYS



def get_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    builder = InlineKeyboardBuilder()

    buttons = [
        ("üóì –ë–ª–∏–∂–∞–π—à–∏–µ —Å–º–µ–Ω—ã", "shifts"),
        ("‚è± –£—á—ë—Ç —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", "worked_time"),
        ("üìÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–º–µ–Ω—É", "check_shift"),  # <-  –ò–∑–º–µ–Ω–µ–Ω–æ
        ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings"),
        ("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")
    ]

    for text, callback_data in buttons:
        builder.button(text=text, callback_data=callback_data)

    builder.adjust(1)
    return builder.as_markup()


def get_settings_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notifications")
    builder.button(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="set_time")
    builder.button(text="üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="status")
    builder.button(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    return builder.as_markup()


def get_notification_settings_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    for notif_key, notif_name in NOTIFICATION_TYPES.items():
        builder.button(
            text=notif_name,
            callback_data=f"toggle_{notif_key}"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
        callback_data="back_to_settings"
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥)
    builder.adjust(1)

    return builder.as_markup()

async def show_schedule_choice(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    current_date = datetime.now()
    current_month = current_date.month
    next_month = (current_month % 12) + 1
    builder.button(text=MONTHS_RU[current_month], callback_data=f"schedule_month:{current_month}")
    builder.button(text=MONTHS_RU[next_month], callback_data=f"schedule_month:{next_month}")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=builder.as_markup())


async def show_dates_for_month(callback: CallbackQuery, month: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞, —Ä–∞–∑–±–∏–≤–∞—è –ø–æ –Ω–µ–¥–µ–ª—è–º, –≤ —Å—Ç–æ–ª–±–µ—Ü"""
    current_date = datetime.now()
    year = current_date.year
    if month > 12:
        year += 1

    first_day = datetime(year, month, 1)
    days_in_month = (datetime(year, (month % 12) + 1, 1) - timedelta(days=1)).day

    builder = InlineKeyboardBuilder()

    start_day = 1
    for day in range(1, days_in_month + 1):
        date_obj = datetime(year, month, day)
        if date_obj.weekday() == 6 or day == days_in_month:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
            end_day = day
            days_text = f"{start_day} - {end_day}"
            callback_data = f"schedule_dates:{month}:{start_day}-{end_day}"
            builder.button(text=days_text, callback_data=callback_data)
            start_day = day + 1

    builder.adjust(1)  # –í—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç–æ–ª–±–µ—Ü
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é ({MONTHS_RU[month]}):", reply_markup=builder.as_markup())


async def show_specific_date_buttons(callback: CallbackQuery, month: int, days_range: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –≤ –≤–∏–¥–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏"""

    start_day, end_day = map(int, days_range.split('-'))
    current_date = datetime.now()
    year = current_date.year
    if month > 12:
        year += 1

    builder = InlineKeyboardBuilder()
    for day in range(start_day, end_day + 1):
        date_obj = datetime(year, month, day)
        weekday = WEEKDAYS[date_obj.strftime('%A').lower()]
        button_text = f"{day} ({weekday})"
        callback_data = f"schedule_day:{month}:{day}"
        builder.button(text=button_text, callback_data=callback_data)

    builder.adjust(1)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=builder.as_markup())