import logging
import os
from datetime import datetime, timedelta
import openpyxl
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

from config import ADMIN_USERS, WEEKDAYS
from services import get_next_shift
from typing import Tuple, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

router = Router()


@router.message(Command("test_files"))
async def cmd_test_files(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    if str(message.from_user.id) not in ADMIN_USERS:
        return

    try:
        debug_info = ["üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n"]

        files_to_check = ['schedule.xlsx', 'schedule_next.xlsx']
        for file in files_to_check:
            if os.path.exists(file):
                file_size = os.path.getsize(file)
                modified_time = datetime.fromtimestamp(os.path.getmtime(file))
                debug_info.extend([
                    f"–§–∞–π–ª {file}:",
                    f"‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç",
                    f"üìä –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç",
                    f"üïí –ò–∑–º–µ–Ω–µ–Ω: {modified_time.strftime('%d.%m.%Y %H:%M:%S')}\n"
                ])
            else:
                debug_info.extend([
                    f"–§–∞–π–ª {file}:",
                    f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω\n"
                ])

        await message.answer("\n".join(debug_info))

    except Exception as e:
        await message.answer(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–æ–≤: {str(e)}")


@router.message(Command("test_schedule_structure"))
async def cmd_test_schedule_structure(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    if str(message.from_user.id) not in ADMIN_USERS:
        return

    try:
        debug_info = ["üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n"]

        for file in ['schedule.xlsx', 'schedule_next.xlsx']:
            if not os.path.exists(file):
                debug_info.append(f"‚ùå –§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω\n")
                continue

            wb = openpyxl.load_workbook(file)
            ws = wb.active

            debug_info.extend([
                f"–§–∞–π–ª {file}:",
                f"üìè –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {ws.max_row}",
                f"üìè –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫: {ws.max_column}",
                "\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤—ã—Ö 5 —Å—Ç—Ä–æ–∫:"
            ])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
            for row in range(1, min(6, ws.max_row + 1)):
                row_data = [str(ws.cell(row=row, column=col).value) for col in range(1, 5)]
                debug_info.append(f"–°—Ç—Ä–æ–∫–∞ {row}: {' | '.join(row_data)}")

            debug_info.append("")
            wb.close()

        await message.answer("\n".join(debug_info))

    except Exception as e:
        await message.answer(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {str(e)}")


@router.message(Command("test_user_schedule"))
async def cmd_test_user_schedule(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if str(message.from_user.id) not in ADMIN_USERS:
        return

    try:
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        args = message.text.split()
        test_login = args[1] if len(args) > 1 else "sm_kirillts"

        debug_info = [f"üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {test_login}:\n"]

        for file in ['schedule.xlsx', 'schedule_next.xlsx']:
            if not os.path.exists(file):
                continue

            wb = openpyxl.load_workbook(file)
            ws = wb.active

            debug_info.append(f"–§–∞–π–ª {file}:")

            # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            found = False
            for row in ws.iter_rows():
                cell = row[2]  # 3-—è –∫–æ–ª–æ–Ω–∫–∞
                if cell.value and str(cell.value).lower() == test_login.lower():
                    found = True
                    debug_info.append(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ {cell.row}")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–º–µ–Ω—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
                    shifts = []
                    for col in range(4, min(ws.max_column + 1, 10)):  # –ü–µ—Ä–≤—ã–µ 6 –¥–Ω–µ–π
                        shift = ws.cell(row=cell.row, column=col).value
                        shifts.append(f"–î–µ–Ω—å {col - 3}: {shift}")
                    debug_info.append("–°–º–µ–Ω—ã:")
                    debug_info.extend(shifts)
                    break

            if not found:
                debug_info.append("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

            debug_info.append("")
            wb.close()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ–Ω
        debug_info.append("üîÑ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ get_next_shift:")
        shifts = await get_next_shift(test_login)
        debug_info.append(shifts)

        await message.answer("\n".join(debug_info))

    except Exception as e:
        await message.answer(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")


@router.message(Command("test_date_handling"))
async def cmd_test_date_handling(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É –º–µ—Å—è—Ü–∞–º–∏"""
    if str(message.from_user.id) not in ADMIN_USERS:
        return

    try:
        current_date = datetime.now()
        debug_info = ["üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç:\n"]

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞—Ç—ã
        test_dates = [
            current_date + timedelta(days=1),
            current_date + timedelta(days=2),
            current_date + timedelta(days=3),
            current_date.replace(day=1) + timedelta(days=32),  # —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        ]

        for date in test_dates:
            debug_info.extend([
                f"–î–∞—Ç–∞: {date.strftime('%d.%m.%Y')}",
                f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {WEEKDAYS[date.strftime('%A').lower()]}",
                f"–ú–µ—Å—è—Ü: {date.month} {'(—Å–ª–µ–¥—É—é—â–∏–π)' if date.month != current_date.month else '(—Ç–µ–∫—É—â–∏–π)'}",
                f"–ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏: {date.day + 3}\n"
            ])

        await message.answer("\n".join(debug_info))

    except Exception as e:
        await message.answer(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç: {str(e)}")


async def test_shift_command(test_login: str = "sm_kirillts") -> Tuple[bool, str]:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã shift"""
    try:
        shifts = await get_next_shift(test_login)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        if not shifts:
            return False, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–º–µ–Ω–∞—Ö
        lines = shifts.split('\n')
        if len(lines) < 4:  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ + 3 –¥–Ω—è
            return False, "–ù–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
        for line in lines[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if not line:
                continue
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ (–¥–∞—Ç–∞ (–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏) - —Å–º–µ–Ω–∞)
            if not ('202' in line and '(' in line and ')' in line and '-' in line):
                return False, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line}"

        return True, "OK"
    except Exception as e:
        return False, str(e)


async def test_files_existence() -> Tuple[bool, str]:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤"""
    try:
        files = ['schedule.xlsx', 'schedule_next.xlsx']
        missing = [f for f in files if not os.path.exists(f)]
        if missing:
            return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing)}"
        return True, "OK"
    except Exception as e:
        return False, str(e)


async def test_schedule_structure() -> Tuple[bool, str]:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        for file in ['schedule.xlsx', 'schedule_next.xlsx']:
            if not os.path.exists(file):
                continue

            wb = openpyxl.load_workbook(file)
            ws = wb.active

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
            if ws.max_row < 2:
                return False, f"{file}: –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å—Ç—Ä–æ–∫"
            if ws.max_column < 34:  # 3 —Å–ª—É–∂–µ–±–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∏ + 31 –¥–µ–Ω—å
                return False, f"{file}: –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –∫–æ–ª–æ–Ω–æ–∫"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª—É–∂–µ–±–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
            if not ws.cell(row=1, column=3).value:
                return False, f"{file}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ –ª–æ–≥–∏–Ω–∞"

            wb.close()
        return True, "OK"
    except Exception as e:
        return False, str(e)


async def test_date_handling() -> Tuple[bool, str]:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç"""
    try:
        current_date = datetime.now()
        test_dates = [
            current_date + timedelta(days=1),
            current_date + timedelta(days=2),
            current_date + timedelta(days=3),
            current_date.replace(day=1) + timedelta(days=32)
        ]

        for date in test_dates:
            if date.weekday() not in range(7):
                return False, f"–ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è {date}"
            if date.strftime('%A').lower() not in WEEKDAYS:
                return False, f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–ª—è {date}"

        return True, "OK"
    except Exception as e:
        return False, str(e)


@router.message(Command("test_all"))
async def cmd_test_all(message: Message):
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    if str(message.from_user.id) not in ADMIN_USERS:
        return

    results = []

    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    tests = [
        ("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤", test_files_existence()),
        ("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", test_schedule_structure()),
        ("üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç", test_date_handling()),
        ("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã shift", test_shift_command())
    ]

    for test_name, test_coro in tests:
        success, message_text = await test_coro
        status = "‚úÖ" if success else "‚ùå"
        result = f"{status} {test_name}"
        if not success:
            result += f"\n    –û—à–∏–±–∫–∞: {message_text}"
        results.append(result)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    report = "üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n" + "\n\n".join(results)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    all_passed = all(r.startswith("‚úÖ") for r in results)
    report += f"\n\n{'‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã' if all_passed else '‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö'}"

    await message.answer(report)