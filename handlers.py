import os
import logging
import openpyxl
from datetime import datetime, timedelta
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import ADMIN_USERS
from utils import (
    UserDataManager,
    NOTIFICATION_TYPES,
    format_notification_status,
    is_valid_username
)
from services import get_next_shift, calculate_worked_time
from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import get_main_keyboard, get_settings_keyboard, get_notification_settings_keyboard


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

router = Router()
user_manager = UserDataManager()

class NotificationStates(StatesGroup):
    waiting_for_time = State()
    waiting_for_username = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    username = user_manager.get_user_by_telegram_id(str(message.from_user.id))
    if username:
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
            f"–í–∞—à –ª–æ–≥–∏–Ω: {username}",
            reply_markup=get_main_keyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à –ª–æ–≥–∏–Ω.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register sm_username"
        )


@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        username = user_manager.get_user_by_telegram_id(str(callback.from_user.id))
        if not username:
            await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å username —á–µ—Ä–µ–∑ /register")
            await callback.answer()
            return

        await callback.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=get_settings_keyboard()
        )
        await callback.answer()

    except Exception as e:
        logging.error(f"Error in show_settings: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")


@router.callback_query(F.data == "shifts")
async def show_shifts(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ë–ª–∏–∂–∞–π—à–∏–µ —Å–º–µ–Ω—ã"""
    try:
        username = user_manager.get_user_by_telegram_id(str(callback.from_user.id))
        if not username:
            await callback.message.edit_text(
                "‚ö†Ô∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–º–µ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –ª–æ–≥–∏–Ω.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register sm_username",
                reply_markup=get_main_keyboard()
            )
            await callback.answer()
            return

        shifts = await get_next_shift(username)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–º–µ–Ω–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é
        await callback.message.edit_text(
            shifts,
            reply_markup=get_main_keyboard()
        )
        await callback.answer()

    except Exception as e:
        logging.error(f"Error in show_shifts: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–º–µ–Ω–∞—Ö",
            reply_markup=get_main_keyboard()
        )
        await callback.answer()


@router.callback_query(F.data == "worked_time")
async def show_worked_time(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –£—á—ë—Ç —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        username = user_manager.get_user_by_telegram_id(str(callback.from_user.id))
        if not username:
            await callback.message.edit_text(
                "‚ö†Ô∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –ª–æ–≥–∏–Ω.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register sm_username",
                reply_markup=get_main_keyboard()
            )
            await callback.answer()
            return

        worked_time = await calculate_worked_time(username)
        await callback.message.edit_text(
            worked_time,
            reply_markup=get_main_keyboard()
        )
        await callback.answer()

    except Exception as e:
        logging.error(f"Error in show_worked_time: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
            reply_markup=get_main_keyboard()
        )
        await callback.answer()


@router.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    try:
        help_text = (
            "ü§ñ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n\n"
            "üóì <b>–ë–ª–∏–∂–∞–π—à–∏–µ —Å–º–µ–Ω—ã</b>\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏\n"
            "‚Ä¢ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω\n\n"
            "‚è± <b>–£—á—ë—Ç —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</b>\n"
            "‚Ä¢ –ü–æ–¥—Å—á—ë—Ç –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–º–µ–Ω–∞–º\n\n"
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é\n\n"
            "üìù <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/register - –ø—Ä–∏–≤—è–∑–∫–∞ –ª–æ–≥–∏–Ω–∞\n"
            "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"
        )
        await callback.message.edit_text(
            help_text,
            parse_mode="HTML",
            reply_markup=get_main_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        )
        await callback.answer()

    except Exception as e:
        logging.error(f"Error in show_help: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–º–æ—â–∏")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "set_time")
async def process_time_setting(callback: CallbackQuery, state: FSMContext):
    await state.set_state(NotificationStates.waiting_for_time)
    await callback.message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19:00)")
    await callback.answer()


@router.callback_query(F.data == "notifications")
async def process_notifications_setting(callback: CallbackQuery):
    await callback.message.edit_text(
        "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=get_notification_settings_keyboard()
    )


@router.callback_query(F.data == "status")
async def process_status(callback: CallbackQuery):
    username = user_manager.get_user_by_telegram_id(str(callback.from_user.id))
    if not username:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ username!")
        return

    user_data = user_manager.get_user_settings(username)
    status_text = (
        f"üë§ Username: {username}\n"
        f"‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {user_data['notification_time']}\n\n"
        "üîî –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
    )
    for notif_key, notif_name in NOTIFICATION_TYPES.items():
        status = user_data["notifications"][notif_key]
        status_text += f"{'‚úÖ' if status else '‚ùå'} {notif_name}\n"

    await callback.message.edit_text(
        status_text,
        reply_markup=get_settings_keyboard()
    )


@router.callback_query(F.data == "main_menu")
async def process_return_to_main(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/register sm_username - –ü—Ä–∏–≤—è–∑–∞—Ç—å username\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/time - –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/status - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
        "/shift - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–π —Å–º–µ–Ω–µ\n"
        "/worked_time - –ü–æ–¥—Å—á–µ—Ç –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
    )
    await message.answer(help_text)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("register"))
async def cmd_register(message: Message):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /register sm_username")
            return

        username = args[1].lower()
        if not await is_valid_username(username):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sm_' –∏ –±—ã—Ç—å –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        data = user_manager.load_user_data()

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "user_id": str(message.from_user.id),
            "notifications": {
                "shift1": True,
                "shift2": True,
                "shift3": True,
                "weekend_duty": True,
                "day_off": True
            },
            "notification_time": "18:00"
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data[username] = user_data
        user_manager.save_user_data(data)

        await message.answer(
            "‚úÖ Username —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n"
            f"–õ–æ–≥–∏–Ω: {username}",
            reply_markup=get_main_keyboard()
        )

    except Exception as e:
        logging.error(f"Error in registration: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.message(Command("settings"))
async def cmd_settings(message: Message):
    username = user_manager.get_user_by_telegram_id(str(message.from_user.id))
    if not username:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å username —á–µ—Ä–µ–∑ /register")
        return

    builder = InlineKeyboardBuilder()
    user_data = user_manager.get_user_settings(username)

    for notif_key, notif_name in NOTIFICATION_TYPES.items():
        status = user_data["notifications"][notif_key]
        builder.button(
            text=f"{notif_name}: {format_notification_status(status)}",
            callback_data=f"toggle_{notif_key}"
        )
    builder.adjust(1)

    await message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=builder.as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(F.data.startswith("toggle_"))
async def process_notification_toggle(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è username
        username = user_manager.get_user_by_telegram_id(str(callback.from_user.id))
        if not username:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ username!", show_alert=True)
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ callback_data
        notif_type = callback.data.split("_")[1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞—Ö
        if notif_type not in NOTIFICATION_TYPES:
            await callback.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notif_type}", show_alert=True)
            return

        user_data = user_manager.get_user_settings(username)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if notif_type not in user_data["notifications"]:
            # –ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
            user_data["notifications"][notif_type] = True
            user_manager.save_user_data(user_data)

        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        current_status = user_data["notifications"][notif_type]
        user_manager.update_user_notifications(username, notif_type, not current_status)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_data = user_manager.get_user_settings(username)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        notification_text = "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
        for key, name in NOTIFICATION_TYPES.items():
            status = user_data["notifications"].get(key, False)
            notification_text += f"{'‚úÖ' if status else '‚ùå'} {name}\n"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            notification_text,
            reply_markup=get_notification_settings_keyboard()
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if not current_status else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '{NOTIFICATION_TYPES[notif_type]}' {status_text}",
            show_alert=False
        )

    except Exception as e:
        logging.error(f"Error in process_notification_toggle: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

@router.callback_query(F.data == "back_to_settings")
async def process_back_to_settings(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_settings_keyboard()
    )


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.message(Command("time"))
async def cmd_time(message: Message, state: FSMContext):
    username = user_manager.get_user_by_telegram_id(str(message.from_user.id))
    if not username:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å username —á–µ—Ä–µ–∑ /register")
        return

    await state.set_state(NotificationStates.waiting_for_time)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19:00)"
    )


@router.message(NotificationStates.waiting_for_time)
async def process_notification_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    username = user_manager.get_user_by_telegram_id(str(message.from_user.id))

    if user_manager.update_notification_time(username, message.text):
        await message.answer(
            f"‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {message.text}",
            reply_markup=get_settings_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19:00)",
            reply_markup=get_settings_keyboard()
        )

    await state.clear()

@router.callback_query(F.data == "change_username")
async def process_change_username(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è username"""
    await state.set_state(NotificationStates.waiting_for_username)
    await callback.message.answer(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π username –≤ —Ñ–æ—Ä–º–∞—Ç–µ sm_username\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: sm_ivan"
    )
    await callback.answer()


class NotificationStates(StatesGroup):
    waiting_for_time = State()
    waiting_for_username = State()


@router.message(NotificationStates.waiting_for_username)
async def process_new_username(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ username"""
    new_username = message.text.lower()

    if not await is_valid_username(new_username):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sm_' –∏ –±—ã—Ç—å –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.",
            reply_markup=get_settings_keyboard()
        )
        await state.clear()
        return

    data = user_manager.load_user_data()
    if new_username not in data:
        await message.answer(
            "‚ùå –¢–∞–∫–æ–π username –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.",
            reply_markup=get_settings_keyboard()
        )
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç username –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if data[new_username]["user_id"] != "0" and data[new_username]["user_id"] != str(message.from_user.id):
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç username —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
            reply_markup=get_settings_keyboard()
        )
        await state.clear()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º username
    data[new_username]["user_id"] = str(message.from_user.id)
    user_manager.save_user_data(data)

    await message.answer(
        f"‚úÖ Username —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_username}",
        reply_markup=get_settings_keyboard()
    )
    await state.clear()

@router.message(Command("status"))
async def cmd_status(message: Message):
    username = user_manager.get_user_by_telegram_id(str(message.from_user.id))
    if not username:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å username —á–µ—Ä–µ–∑ /register")
        return

    user_data = user_manager.get_user_settings(username)
    if not user_data:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    status_text = [
        f"üì± Username: {username}",
        f"‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {user_data['notification_time']}",
        "\nüìã –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:"
    ]

    for notif_key, notif_name in NOTIFICATION_TYPES.items():
        status = user_data["notifications"][notif_key]
        status_text.append(f"- {notif_name}: {format_notification_status(status)}")

    await message.answer("\n".join(status_text))

@router.message(Command("shift"))
async def cmd_shift(message: Message):
    username = user_manager.get_user_by_telegram_id(str(message.from_user.id))
    if not username:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å username —á–µ—Ä–µ–∑ /register")
        return

    try:
        next_shift_info = await get_next_shift(username)
        await message.answer(next_shift_info)
    except Exception as e:
        logging.error(f"Error in shift command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–º–µ–Ω–µ")

@router.message(Command("worked_time"))
async def cmd_worked_time(message: Message):
    username = user_manager.get_user_by_telegram_id(str(message.from_user.id))
    if not username:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å username —á–µ—Ä–µ–∑ /register")
        return

    try:
        worked_time = await calculate_worked_time(username)
        await message.answer(worked_time)
    except Exception as e:
        logging.error(f"Error in worked_time command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")


@router.message(Command("debug_schedule"))
async def cmd_debug_schedule(message: Message):
    if str(message.from_user.id) not in ADMIN_USERS:
        return

    try:
        wb = openpyxl.load_workbook('schedule.xlsx')
        ws = wb.active

        debug_info = ["üìã –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:"]

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        username = "sm_kirillts"
        current_date = datetime.now()
        next_date = current_date + timedelta(days=1)
        next_day_col = next_date.day + 1

        debug_info.append(f"\nüìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date.strftime('%d.%m.%Y')}")
        debug_info.append(f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –¥–∞—Ç–∞: {next_date.strftime('%d.%m.%Y')}")
        debug_info.append(f"üìä –ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç—ã: {next_day_col}")

        found = False
        for row in ws.iter_rows():
            for cell in row:
                if cell.value and str(cell.value).lower() == username.lower():
                    shift = ws.cell(row=cell.row, column=next_day_col).value
                    debug_info.append(f"\nüë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
                    debug_info.append(f"üìç –°—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ: {cell.row}")
                    debug_info.append(f"üîÑ –ó–Ω–∞—á–µ–Ω–∏–µ —Å–º–µ–Ω—ã: {shift}")
                    found = True
                    break
            if found:
                break

        if not found:
            debug_info.append(f"\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")

        # –î–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        debug_info.append(f"\nüìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {os.path.abspath('schedule.xlsx')}")
        debug_info.append(f"üìä –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {ws.max_row}x{ws.max_column}")

        await message.answer("\n".join(debug_info))
        wb.close()
    except Exception as e:
        error_msg = f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ:\n{str(e)}"
        if 'schedule.xlsx' not in os.listdir():
            error_msg += "\n\n–§–∞–π–ª schedule.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏!"
        await message.answer(error_msg)


@router.message(Command("check_cell"))
async def cmd_check_cell(message: Message):
    if str(message.from_user.id) not in ADMIN_USERS:
        return

    try:
        wb = openpyxl.load_workbook('schedule.xlsx')
        ws = wb.active

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —è—á–µ–π–∫—É
        next_date = datetime.now() + timedelta(days=1)
        next_day_col = next_date.day + 3  # +3 —Ç–∞–∫ –∫–∞–∫ —Å–º–µ–Ω—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 4-–π –∫–æ–ª–æ–Ω–∫–∏

        debug_info = [
            "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —è—á–µ–µ–∫:",
            f"üìÖ –ó–∞–≤—Ç—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞: {next_date.strftime('%d.%m.%Y')}",
            f"üìä –ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏: {next_day_col}\n"
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ —Å –ª–æ–≥–∏–Ω–∞–º–∏ (3-—è –∫–æ–ª–æ–Ω–∫–∞)
        for row in range(1, ws.max_row + 1):
            login_cell = ws.cell(row=row, column=3)  # 3-—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –ª–æ–≥–∏–Ω–æ–≤
            shift_cell = ws.cell(row=row, column=next_day_col)

            if login_cell.value:
                debug_info.append(f"–°—Ç—Ä–æ–∫–∞ {row}: {login_cell.value} -> {shift_cell.value}")
                if str(login_cell.value).lower() == 'sm_kirillts':
                    debug_info.append(f"\nüéØ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞!")
                    debug_info.append(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏ —Å–º–µ–Ω—ã: {shift_cell.coordinate}")
                    debug_info.append(f"–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(shift_cell.value)}")
                    debug_info.append(f"–ó–Ω–∞—á–µ–Ω–∏–µ: '{shift_cell.value}'")

        await message.answer("\n".join(debug_info))
        wb.close()
    except Exception as e:
        await message.answer(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}")