import os
import logging
import openpyxl
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import ADMIN_USERS
from utils import (
    UserDataManager,
    NOTIFICATION_TYPES,
    format_notification_status,
    is_valid_username
)
from services import get_next_shift, calculate_worked_time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

router = Router()
user_manager = UserDataManager()

class NotificationStates(StatesGroup):
    waiting_for_time = State()
    waiting_for_username = State()


# –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
@router.message(CommandStart())
async def cmd_start(message: Message):
    username = user_manager.get_user_by_telegram_id(str(message.from_user.id))
    if username:
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!\n"
            f"–í–∞—à username: {username}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
    else:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à username.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register sm_username"
        )


@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/register sm_username - –ü—Ä–∏–≤—è–∑–∞—Ç—å username\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/time - –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/status - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
        "/shift - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–π —Å–º–µ–Ω–µ\n"
        "/worked_time - –ü–æ–¥—Å—á–µ—Ç –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
    )
    await message.answer(help_text)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("register"))
async def cmd_register(message: Message):
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /register sm_username")
        return

    username = args[1].lower()
    if not await is_valid_username(username):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sm_' –∏ –±—ã—Ç—å –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.")
        return

    data = user_manager.load_user_data()
    if username not in data:
        await message.answer("–¢–∞–∫–æ–π username –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç username –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if data[username]["user_id"] != "0" and data[username]["user_id"] != str(message.from_user.id):
        await message.answer("–≠—Ç–æ—Ç username —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        return

    data[username]["user_id"] = str(message.from_user.id)
    user_manager.save_user_data(data)
    await message.answer("Username —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.message(Command("settings"))
async def cmd_settings(message: Message):
    username = user_manager.get_user_by_telegram_id(str(message.from_user.id))
    if not username:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å username —á–µ—Ä–µ–∑ /register")
        return

    builder = InlineKeyboardBuilder()
    user_data = user_manager.get_user_settings(username)

    for notif_key, notif_name in NOTIFICATION_TYPES.items():
        status = user_data["notifications"][notif_key]
        builder.button(
            text=f"{notif_name}: {format_notification_status(status)}",
            callback_data=f"toggle_{notif_key}"
        )
    builder.adjust(1)

    await message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=builder.as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(F.data.startswith("toggle_"))
async def process_notification_toggle(callback: CallbackQuery):
    username = user_manager.get_user_by_telegram_id(str(callback.from_user.id))
    if not username:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    notif_type = callback.data.split("_")[1]
    user_data = user_manager.get_user_settings(username)
    current_status = user_data["notifications"][notif_type]

    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    user_manager.update_user_notifications(username, notif_type, not current_status)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    user_data = user_manager.get_user_settings(username)

    for nk, nn in NOTIFICATION_TYPES.items():
        status = user_data["notifications"][nk]
        builder.button(
            text=f"{nn}: {format_notification_status(status)}",
            callback_data=f"toggle_{nk}"
        )
    builder.adjust(1)

    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    await callback.answer()


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.message(Command("time"))
async def cmd_time(message: Message, state: FSMContext):
    username = user_manager.get_user_by_telegram_id(str(message.from_user.id))
    if not username:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å username —á–µ—Ä–µ–∑ /register")
        return

    await state.set_state(NotificationStates.waiting_for_time)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19:00)"
    )


@router.message(NotificationStates.waiting_for_time)
async def process_notification_time(message: Message, state: FSMContext):
    username = user_manager.get_user_by_telegram_id(str(message.from_user.id))

    if user_manager.update_notification_time(username, message.text):
        await message.answer(f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {message.text}")
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19:00)")

    await state.clear()

@router.message(Command("status"))
async def cmd_status(message: Message):
    username = user_manager.get_user_by_telegram_id(str(message.from_user.id))
    if not username:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å username —á–µ—Ä–µ–∑ /register")
        return

    user_data = user_manager.get_user_settings(username)
    if not user_data:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    status_text = [
        f"üì± Username: {username}",
        f"‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {user_data['notification_time']}",
        "\nüìã –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:"
    ]

    for notif_key, notif_name in NOTIFICATION_TYPES.items():
        status = user_data["notifications"][notif_key]
        status_text.append(f"- {notif_name}: {format_notification_status(status)}")

    await message.answer("\n".join(status_text))

@router.message(Command("shift"))
async def cmd_shift(message: Message):
    username = user_manager.get_user_by_telegram_id(str(message.from_user.id))
    if not username:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å username —á–µ—Ä–µ–∑ /register")
        return

    try:
        next_shift_info = await get_next_shift(username)
        await message.answer(next_shift_info)
    except Exception as e:
        logging.error(f"Error in shift command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–º–µ–Ω–µ")

@router.message(Command("worked_time"))
async def cmd_worked_time(message: Message):
    username = user_manager.get_user_by_telegram_id(str(message.from_user.id))
    if not username:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å username —á–µ—Ä–µ–∑ /register")
        return

    try:
        worked_time = await calculate_worked_time(username)
        await message.answer(worked_time)
    except Exception as e:
        logging.error(f"Error in worked_time command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")


@router.message(Command("debug_schedule"))
async def cmd_debug_schedule(message: Message):
    if str(message.from_user.id) not in ADMIN_USERS:
        return

    try:
        wb = openpyxl.load_workbook('schedule.xlsx')
        ws = wb.active

        debug_info = ["üìã –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:"]

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        username = "sm_kirillts"
        current_date = datetime.now()
        next_date = current_date + timedelta(days=1)
        next_day_col = next_date.day + 1

        debug_info.append(f"\nüìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date.strftime('%d.%m.%Y')}")
        debug_info.append(f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –¥–∞—Ç–∞: {next_date.strftime('%d.%m.%Y')}")
        debug_info.append(f"üìä –ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç—ã: {next_day_col}")

        found = False
        for row in ws.iter_rows():
            for cell in row:
                if cell.value and str(cell.value).lower() == username.lower():
                    shift = ws.cell(row=cell.row, column=next_day_col).value
                    debug_info.append(f"\nüë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
                    debug_info.append(f"üìç –°—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ: {cell.row}")
                    debug_info.append(f"üîÑ –ó–Ω–∞—á–µ–Ω–∏–µ —Å–º–µ–Ω—ã: {shift}")
                    found = True
                    break
            if found:
                break

        if not found:
            debug_info.append(f"\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")

        # –î–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        debug_info.append(f"\nüìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {os.path.abspath('schedule.xlsx')}")
        debug_info.append(f"üìä –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {ws.max_row}x{ws.max_column}")

        await message.answer("\n".join(debug_info))
        wb.close()
    except Exception as e:
        error_msg = f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ:\n{str(e)}"
        if 'schedule.xlsx' not in os.listdir():
            error_msg += "\n\n–§–∞–π–ª schedule.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏!"
        await message.answer(error_msg)


@router.message(Command("check_cell"))
async def cmd_check_cell(message: Message):
    if str(message.from_user.id) not in ADMIN_USERS:
        return

    try:
        wb = openpyxl.load_workbook('schedule.xlsx')
        ws = wb.active

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —è—á–µ–π–∫—É
        next_date = datetime.now() + timedelta(days=1)
        next_day_col = next_date.day + 3  # +3 —Ç–∞–∫ –∫–∞–∫ —Å–º–µ–Ω—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 4-–π –∫–æ–ª–æ–Ω–∫–∏

        debug_info = [
            "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —è—á–µ–µ–∫:",
            f"üìÖ –ó–∞–≤—Ç—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞: {next_date.strftime('%d.%m.%Y')}",
            f"üìä –ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏: {next_day_col}\n"
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ —Å –ª–æ–≥–∏–Ω–∞–º–∏ (3-—è –∫–æ–ª–æ–Ω–∫–∞)
        for row in range(1, ws.max_row + 1):
            login_cell = ws.cell(row=row, column=3)  # 3-—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –ª–æ–≥–∏–Ω–æ–≤
            shift_cell = ws.cell(row=row, column=next_day_col)

            if login_cell.value:
                debug_info.append(f"–°—Ç—Ä–æ–∫–∞ {row}: {login_cell.value} -> {shift_cell.value}")
                if str(login_cell.value).lower() == 'sm_kirillts':
                    debug_info.append(f"\nüéØ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞!")
                    debug_info.append(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏ —Å–º–µ–Ω—ã: {shift_cell.coordinate}")
                    debug_info.append(f"–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(shift_cell.value)}")
                    debug_info.append(f"–ó–Ω–∞—á–µ–Ω–∏–µ: '{shift_cell.value}'")

        await message.answer("\n".join(debug_info))
        wb.close()
    except Exception as e:
        await message.answer(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}")